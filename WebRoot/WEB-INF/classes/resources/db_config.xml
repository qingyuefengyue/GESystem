<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"    
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"    
	xmlns:p="http://www.springframework.org/schema/p"    
	xmlns:mvc="http://www.springframework.org/schema/mvc"    
	xmlns:context="http://www.springframework.org/schema/context"    
	xmlns:util="http://www.springframework.org/schema/util"  
	xmlns:aop="http://www.springframework.org/schema/aop" 
	xmlns:tx="http://www.springframework.org/schema/tx"  
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans 
		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd    
	    http://www.springframework.org/schema/context 
	    http://www.springframework.org/schema/context/spring-context-3.0.xsd    
	    http://www.springframework.org/schema/mvc 
	    http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd    
	    http://www.springframework.org/schema/util 
	    http://www.springframework.org/schema/util/spring-util-3.0.xsd
	    http://www.springframework.org/schema/tx 
	    http://www.springframework.org/schema/tx/spring-tx-3.0.xsd 
		http://www.springframework.org/schema/aop  
		http://www.springframework.org/schema/aop/spring-aop-3.0.xsd">	
	
	<!-- 配置spring加载properties数据库外部文件 ↓ -->
	<bean id="dbConfig"
		class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
		<property name="locations">
			<list>
				<value>classpath:resources/datasource/dbConfig.properties</value>
			</list>
		</property>
		<property name="fileEncoding" value="UTF-8" />
	</bean>
	
	<!-- spring 继承mybitis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"> 
       <property name="dataSource" ref="dataSource"/> 
        <!-- 该属性用来指定MyBatis的XML配置文件路径,跟Spring整合时，编写MyBatis映射文件的目的无非是配置一下typeAlias、setting之类的 
       元素。不用在其中指定数据源，或者事务处理方式。就算配置了也会被忽略。因为这些都是使用Spring中的配置 。当然如果你不打算添加typeAlias 
       之类的设置的话，你连MyBatis的配置文件都不用写，更不用配置这个属性了--> 
       <property name="configLocation" value="classpath:resources/mybitis_config.xml" />
       <!-- 该配置文件用来指定Mapper映射文件的位置 ，如果映射文件与相应的接口同名，且在同一路径下，那么可以不配置该选项-->
       <property name="mapperLocations" value="classpath:resources/mybitis/mapperXML/*Mapper.xml"/> 
    </bean>
    
    
	 <!-- 注册Mapper：也可不指定特定mapper，而使用自动扫描包的方式来注册各种Mapper ，配置如下：--> 
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"> 
       <property name="basePackage" value="com.bonc.GESysServer.mybitis.mapper"/> 
    </bean> 
	
	
	<!-- 配置事务管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	
	<!-- 使用annotation定义事务 -->
 	<tx:annotation-driven transaction-manager="transactionManager" proxy-target-class="true" />
	
	<!-- 配置事务传播特性 -->
	<!-- 采用注解的方式管理事务，所以注释掉此配置
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<tx:attributes>
			<tx:method name="save*" propagation="REQUIRED" />
			<tx:method name="edit*" propagation="REQUIRED" />
			<tx:method name="update*" propagation="REQUIRED" />
			<tx:method name="delete*" propagation="REQUIRED" />
			<tx:method name="remove*" propagation="REQUIRED" />
			<tx:method name="*" read-only="true" />
		</tx:attributes>
	</tx:advice -->
	
	<!-- 配置哪些方法参与事务管理 -->
	<!-- 采用注解管理事务，所以注释掉此部分
	<aop:config>
		<aop:advisor pointcut="execution(* com.bonc.GESysServer.dao..*.*(..))"
			advice-ref="txAdvice" />
	</aop:config -->
	<!-- 数据库配置信息 ↑ -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
</beans>